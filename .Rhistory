geom_path_interactive(
aes(data_id = Country, tooltip = country,
colour = continent, alpha = alpha, size = size)
) +
geom_point_interactive(
aes(data_id = Country, tooltip = country, colour = continent)
) +
# label right
geom_text_repel(data = nd %>% filter(iso2 %in% labels.right, type == "net"),
aes(label = country),
direction = "y",
nudge_x = 0.05,
segment.size = 0.2,
segment.alpha = 0.4,
hjust = 0,
family = "OpenSans-CondensedLight", size = 3) +
# label left
geom_text_repel(data = nd %>% filter(iso2 %in% labels.left, type == "gross"),
aes(label = country),
direction = "y",
nudge_x = -0.2,
segment.size = 0.1,
segment.alpha = 0.4,
hjust = 1,
family = "OpenSans-CondensedLight", size = 3) +
theme_minimal(base_family = "OpenSans-CondensedLight") +
scale_x_discrete(name = "", position = "top", expand = c(0,0.33)) +
theme(
panel.grid.major.y = element_line(color = "#2B2B2B", size = 0.05),
panel.grid.minor = element_blank(),
legend.position = c(0.55, 0.9)
) +
scale_colour_manual(values = swi_col[c(2, 4, 6, 8, 1)]) +
scale_alpha_identity() +
scale_size_identity()
ggiraph(
code = {print(ndi)},
width = 1,
hover_css = "cursor:pointer;fill:#ff77c1;stroke:#ff77c1;stroke-width:3;alpha:1"
)
library(tamMap)
library(devtools)
dev_mode(TRUE)
devtools::install_github("tidyverse/ggplot2")
devtools::install_github("tidyverse/ggplot2")
install.packages("lazyeval")
install.packages("lazyeval")
devtools::install_github("tidyverse/ggplot2")
library(ggplot2)
sessionInfo()
dev_mode(FALSE)
library(devtools)
dev_mode(FALSE)
require(sf)
require(dplyr)
require(tamMap)
require(ggplot2)
fBallot <- loadCantonsCHFederalBallot()
attr(fBallot, "ballotName")
cidx <- grep("naturalisation", attr(fBallot, "ballotName"), ignore.case = T)
attr(fBallot, "ballotName")[cidx]
attr(fBallot, "date")[cidx]
# get only naturalisation facilitÃ©e ballots
cidx <- match(c("3150", "4110", "5100", "5110"), colnames(fBallot))
attr(fBallot, "ballotName")[cidx]
fBallot[,cidx]
path.cantons <-  dir(system.file("extdata/shp/CH/2016", package="tamMap"), "cantons.shp", full.names = T)
ca.df <- st_read(path.cantons, layer = "cantons") %>%
select(KANTONSNUM)
# duplicte canton data.frame for each ballot
df <- do.call(rbind, lapply(cidx, function(idx) {
value <- fBallot[,idx]
names(value) <- canton_CH[match(names(value), canton_CH[,1]), "order"]
res <- ca.df
res$value <- value[match(res$KANTONSNUM, names(value))]
res$ballot <- attr(fBallot, "ballotName")[idx]
res$date <- attr(fBallot, "date")[idx]
res
}))
# plot maps
brks <- seq(from = 0, to = 1, length.out = 11) * 100
df$bins <- cut(df$value, breaks = brks, right = F)
df$ballot <- factor(df$ballot, levels = attr(fBallot, "ballotName")[cidx])
ggplot(df) +
geom_sf(fill = bins) +
facet_wrap(~ ballot)
View(ndi)
df$bins
df <- do.call(rbind, lapply(cidx, function(idx) {
value <- fBallot[,idx]
names(value) <- canton_CH[match(names(value), canton_CH[,1]), "order"]
res <- ca.df
res$value <- value[match(res$KANTONSNUM, names(value))]
res$ballot <- attr(fBallot, "ballotName")[idx]
res$date <- attr(fBallot, "date")[idx]
res
}))
# plot maps
brks <- seq(from = 0, to = 1, length.out = 11) * 100
df %<>% mutate(
bins = cut(value, breaks = brks, right = F)
)
df$bi
df <- do.call(rbind, lapply(cidx, function(idx) {
value <- fBallot[,idx]
names(value) <- canton_CH[match(names(value), canton_CH[,1]), "order"]
res <- ca.df
res$value <- value[match(res$KANTONSNUM, names(value))]
res$ballot <- attr(fBallot, "ballotName")[idx]
res$date <- attr(fBallot, "date")[idx]
res
}))
# plot maps
brks <- seq(from = 0, to = 1, length.out = 11) * 100
df <- df %>% mutate(
bins = cut(value, breaks = brks, right = F)
)
df
View(fBallot)
attr(fBallot, "ballotName")[cidx]
df <- do.call(rbind, lapply(cidx, function(idx) {
value <- fBallot[,idx]
names(value) <- canton_CH[match(names(value), canton_CH[,1]), "order"]
res <- ca.df
res$value <- value[match(res$KANTONSNUM, names(value))]
res$ballot <- attr(fBallot, "ballotName")[idx]
res$date <- attr(fBallot, "date")[idx]
res
}))
# plot maps
brks <- seq(from = 0, to = 1, length.out = 11) * 100
df <- df %>% mutate(
bins = cut(value, breaks = brks, right = F),
ballot = factor(ballot, levels = attr(fBallot, "ballotName")[cidx])
)
ggplot(df) +
geom_sf(fill = bins) +
facet_wrap(~ ballot)
ggplot(df) +
geom_sf(ees(fill = bins)) +
facet_wrap(~ ballot)
ggplot(df) +
geom_sf(aes(fill = bins)) +
facet_wrap(~ ballot)
str(df)
gp <- ggplot(df) +
geom_sf(aes(fill = bins), colour = NA) +
scale_fill_viridis_d() +
facet_wrap(~ ballot) +
theme_minimal()
gp
gp <- ggplot(df) +
geom_sf(aes(fill = bins), size = 0) +
scale_fill_viridis_d() +
facet_wrap(~ ballot) +
theme_minimal()
gp
cleanOutput <- F
require("lintr")
library("dplyr")
library("swiTheme")
library("swiRcharts")
library("highcharter")
library("htmltools")
bg.colour <-  "#f7f5ed"
subsetLang <- NULL
# download the raw file without footer!!!
votefile <- "data/allCH_ballots - VOTES_allCH_2017-03-06.csv"
votes.read <- read.csv(votefile, check.names = F, stringsAsFactors = F)
trad <- read.csv("data/allCH_ballots - translations.tsv", sep ="\t", row.names = 1, stringsAsFactors = F)
plot.height <- 520
outputDir <- "output"
if(!file.exists(outputDir)) {dir.create(outputDir)}
# tooltip settings
tp.lineheight <- '1.4'
cleanOutput <- F
require("lintr")
library("dplyr")
library("swiTheme")
library("swiRcharts")
library("highcharter")
library("htmltools")
bg.colour <-  "#f7f5ed"
subsetLang <- NULL
# download the raw file without footer!!!
votefile <- "data/allCH_ballots - VOTES_allCH_2017-03-06.csv"
votes.read <- read.csv(votefile, check.names = F, stringsAsFactors = F)
trad <- read.csv("data/allCH_ballots - translations.tsv", sep ="\t", row.names = 1, stringsAsFactors = F)
plot.height <- 520
outputDir <- "output"
if(!file.exists(outputDir)) {dir.create(outputDir)}
# tooltip settings
tp.lineheight <- '1.4'
votes.read <- read.csv(votefile, check.names = F, stringsAsFactors = F)
votes.read$type <- as.factor(votes.read$type)
## transform date to date
votes.read$date <- as.Date(votes.read$`Date of Votes`, format = "%d/%m/%Y")
## add year
votes.read$year <- as.numeric(substr(votes.read$date,1, 4))
## add counter of ballot type per year
votes.read <- do.call(rbind, by(votes.read, list(votes.read$year, votes.read$type), function(ii) {
cbind(ii, n = as.numeric(0:(nrow(ii)-1)))
}))
###		Load microcopy translations
##### DEBUGGING CASE ~~~~~~~~~~~~
votetype <- levels(votes.read$type)[2]
lang <- colnames(trad)[1]
## SUBSET DATA if subsetLang is defined
if(!is.null(subsetLang) && length(subsetLang) > 0) {
trad <- select(trad, one_of(subsetLang))
}
for(votetype in levels(votes.read$type)) {
for(lang in colnames(trad)) {
# Define output files
typeShort <- gsub(" ", "", votetype)
tmpOuputfile <- paste0(outputDir, "/", typeShort, ".html")
output.html <- paste0(typeShort, "_", lang, "_heatmap.html")
# Define which vote colname to use
col.subset <- c(lang, 'year', 'n', 'Yes [%]', 'Result', 'date', 'Turnout' )
# subset ballot data for the ballot type and the languages
data <- votes.read %>% filter(type == votetype) %>% select(one_of(col.subset))
#
title.bak <- data[,lang]
# rename data for highcharts
colnames(data)[1:5] <- c('name', 'x', 'y', 'value', 'result')
# add HTML break for name longer than 50 characters
data$name <- gsub('(.{1,50})(\\s|$)', '\\1\\<br\\>', data$name)
# Perform vote type specific stuff
# heatmap colors
color0.5 <- '#ADC2C2'
color1 <- '#336666'
subtitle.x <- 5
subtitle.align <- "left"
resetZoomButton.align <- "right"
if(typeShort == 'facultativeReferendum') {
color0.5 <- '#C2C2D1'
color1 <- '#333366'
}
if(typeShort == 'mandatoryReferendum') {
color0.5 <- '#eeeedd'
color1 <- ' #444422'
subtitle.align <- "right"
subtitle.x <- -5
resetZoomButton.align <- "left"
}
## Create the new name as an HTML table (http://rcharts.io/viewer/?5735146)
if(lang == "ara") {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td align="right"><div style="font-size:0.95em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3" align="right"><b><div style="font-size:1.2em">', data$name, '</b></div><hr></td></tr>',
'<tr><td align="right">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td align="left">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
} else if( lang %in% c('jpn', 'chi')) {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td><div style="font-size:0.9em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3"><div style="font-size:1.1em">', data$name, '</div><hr></td></tr>',
'<tr><td align="left">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td style="text-align:right">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
} else {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td><div style="font-size:0.9em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3"><i><div style="font-size:1.1em">', data$name, '</i></div><hr></td></tr>',
'<tr><td align="left">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td style="text-align:right">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
}
hc <- hchart(data, "heatmap",
hcaes(x = x, y = y, value = value, name = name)) %>%
hc_chart(zoomType = "x", height = plot.height, plotBackgroundColor = bg.colour,
backgroundColor = bg.colour, spacing = list(0,5,0,0),
resetZoomButton = list(position = list( align = resetZoomButton.align )))
hc <- hc %>% hc_colorAxis(
min = 0, max = 100, stops = list(
list(0, '#71302F'),
list(0.499, '#EED8D9'),
list(0.5, color0.5),
list(1, color1)
)) %>%
hc_add_theme(hc_theme_swi) %>%
hc_legend(align='center',layout='horizontal', margin=-42, y = 50, verticalAlign='top',symbolWidth = 100,symbolHeight=7) %>%
hc_xAxis(min = min(data$x), max = max(data$x), ceiling = max(data$x), maxPadding = 0,  title = list(text = ""),
lineColor = "#7D8279", tickWidth = 1.5, tickLength = 7, tickColor = "#7D8279") %>%
hc_yAxis(min = min(data$y), max = max(data$y),
maxPadding = 0, lineWidth = 0, minorGridLineWidth = 0, lineColor = 'transparent', title = list(text = ""),
labels = list(enabled = FALSE), minorTickLength = 0, tickLength =  0, gridLineWidth =  0, minorGridLineWidth = 0) %>%
hc_tooltip(formatter = JS("function() { return this.point.name; }"), useHTML = T,
borderWidth = 2, backgroundColor = 'rgba(255,255,255,0.8)', style = list(padding = 3))
yRange <- paste(range(data$x), collapse = "-")
h2title <- paste0(trad[eval(paste("title", typeShort, sep = ".")),lang], " (", yRange, ")")
source <- paste0(trad["source1",lang], htmlLink(trad["sourceLink",lang], trad["source2",lang]), " | swissinfo.ch")
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
tags$body(
div(class="h2abs", HTML(h2title)),
#div(class = "descr", HTML(txt['descr', lang])),
div(class="graphic", hc),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)
), file = output.html, libdir = "js", background = bg.colour
)
} # end loop language
} # end loop votetype
sessionInfo()
install.packages("highcharter")
install.packages("highcharter")
sessionInfo()
library(highcharter)
sessionInfo()
devtools::install_github("jbkunst/highcharter")
library(highcharter)
devtools::install_github("jbkunst/highcharter")
library(highcharter)
sessionInfo()
cleanOutput <- F
require("lintr")
library("dplyr")
library("swiTheme")
library("swiRcharts")
library("highcharter")
library("htmltools")
bg.colour <-  "#f7f5ed"
subsetLang <- NULL
# download the raw file without footer!!!
votefile <- "data/allCH_ballots - VOTES_allCH_2017-03-06.csv"
votes.read <- read.csv(votefile, check.names = F, stringsAsFactors = F)
trad <- read.csv("data/allCH_ballots - translations.tsv", sep ="\t", row.names = 1, stringsAsFactors = F)
plot.height <- 520
outputDir <- "output"
if(!file.exists(outputDir)) {dir.create(outputDir)}
# tooltip settings
tp.lineheight <- '1.4'
votes.read <- read.csv(votefile, check.names = F, stringsAsFactors = F)
votes.read$type <- as.factor(votes.read$type)
## transform date to date
votes.read$date <- as.Date(votes.read$`Date of Votes`, format = "%d/%m/%Y")
## add year
votes.read$year <- as.numeric(substr(votes.read$date,1, 4))
## add counter of ballot type per year
votes.read <- do.call(rbind, by(votes.read, list(votes.read$year, votes.read$type), function(ii) {
cbind(ii, n = as.numeric(0:(nrow(ii)-1)))
}))
###		Load microcopy translations
##### DEBUGGING CASE ~~~~~~~~~~~~
votetype <- levels(votes.read$type)[2]
lang <- colnames(trad)[1]
## SUBSET DATA if subsetLang is defined
if(!is.null(subsetLang) && length(subsetLang) > 0) {
trad <- select(trad, one_of(subsetLang))
}
for(votetype in levels(votes.read$type)) {
for(lang in colnames(trad)) {
# Define output files
typeShort <- gsub(" ", "", votetype)
tmpOuputfile <- paste0(outputDir, "/", typeShort, ".html")
output.html <- paste0(typeShort, "_", lang, "_heatmap.html")
# Define which vote colname to use
col.subset <- c(lang, 'year', 'n', 'Yes [%]', 'Result', 'date', 'Turnout' )
# subset ballot data for the ballot type and the languages
data <- votes.read %>% filter(type == votetype) %>% select(one_of(col.subset))
#
title.bak <- data[,lang]
# rename data for highcharts
colnames(data)[1:5] <- c('name', 'x', 'y', 'value', 'result')
# add HTML break for name longer than 50 characters
data$name <- gsub('(.{1,50})(\\s|$)', '\\1\\<br\\>', data$name)
# Perform vote type specific stuff
# heatmap colors
color0.5 <- '#ADC2C2'
color1 <- '#336666'
subtitle.x <- 5
subtitle.align <- "left"
resetZoomButton.align <- "right"
if(typeShort == 'facultativeReferendum') {
color0.5 <- '#C2C2D1'
color1 <- '#333366'
}
if(typeShort == 'mandatoryReferendum') {
color0.5 <- '#eeeedd'
color1 <- ' #444422'
subtitle.align <- "right"
subtitle.x <- -5
resetZoomButton.align <- "left"
}
## Create the new name as an HTML table (http://rcharts.io/viewer/?5735146)
if(lang == "ara") {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td align="right"><div style="font-size:0.95em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3" align="right"><b><div style="font-size:1.2em">', data$name, '</b></div><hr></td></tr>',
'<tr><td align="right">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td align="left">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
} else if( lang %in% c('jpn', 'chi')) {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td><div style="font-size:0.9em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3"><div style="font-size:1.1em">', data$name, '</div><hr></td></tr>',
'<tr><td align="left">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td style="text-align:right">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
} else {
data$name <- paste0(
'<table cellpadding="1" style="line-height:1.1">',
'<tr><td><div style="font-size:0.9em">', data$date, '</td></div>',
'<td></td><td></td></tr>',
'<tr><td colspan="3"><i><div style="font-size:1.1em">', data$name, '</i></div><hr></td></tr>',
'<tr><td align="left">', trad["tp.yes",lang], ': <b>', round(data$value, 1), '%</b>', '</td><td></td>',
'<td style="text-align:right">', trad["tp.turnout",lang],  " : ",
ifelse(round(data$Turnout, 1) == 0, " ", paste0(round(data$Turnout, 1), "%")), '</td></tr>',
'<tr><td colspan="3" align="center"><div style="color:#999999">',
ifelse(data$result == "no", trad["tp.refused",lang], trad["tp.accepted",lang]), '</td></tr>',
'</table></div>')
}
hc <- hchart(data, "heatmap",
hcaes(x = x, y = y, value = value, name = name)) %>%
hc_chart(zoomType = "x", height = plot.height, plotBackgroundColor = bg.colour,
backgroundColor = bg.colour, spacing = list(0,5,0,0),
resetZoomButton = list(position = list( align = resetZoomButton.align )))
hc <- hc %>% hc_colorAxis(
min = 0, max = 100, stops = list(
list(0, '#71302F'),
list(0.499, '#EED8D9'),
list(0.5, color0.5),
list(1, color1)
)) %>%
hc_add_theme(hc_theme_swi) %>%
hc_legend(align='center',layout='horizontal', margin=-42, y = 50, verticalAlign='top',symbolWidth = 100,symbolHeight=7) %>%
hc_xAxis(min = min(data$x), max = max(data$x), ceiling = max(data$x), maxPadding = 0,  title = list(text = ""),
lineColor = "#7D8279", tickWidth = 1.5, tickLength = 7, tickColor = "#7D8279") %>%
hc_yAxis(min = min(data$y), max = max(data$y),
maxPadding = 0, lineWidth = 0, minorGridLineWidth = 0, lineColor = 'transparent', title = list(text = ""),
labels = list(enabled = FALSE), minorTickLength = 0, tickLength =  0, gridLineWidth =  0, minorGridLineWidth = 0) %>%
hc_tooltip(formatter = JS("function() { return this.point.name; }"), useHTML = T,
borderWidth = 2, backgroundColor = 'rgba(255,255,255,0.8)', style = list(padding = 3))
yRange <- paste(range(data$x), collapse = "-")
h2title <- paste0(trad[eval(paste("title", typeShort, sep = ".")),lang], " (", yRange, ")")
source <- paste0(trad["source1",lang], htmlLink(trad["sourceLink",lang], trad["source2",lang]), " | swissinfo.ch")
save_html(
tags$html(
tags$head(includeHTML(style_swi_highcharter())),
tags$body(
div(class="h2abs", HTML(h2title)),
#div(class = "descr", HTML(txt['descr', lang])),
div(class="graphic", hc),
div(id = "cite", HTML(source)),
HTML(iframeresizer)
)
), file = output.html, libdir = "js", background = bg.colour
)
} # end loop language
} # end loop votetype
files <- c(".*(initiative|Referendum)_.*html", "js")
list.files("output", full.names = T)[list.files("output") != "bak"]
getwd()
setwd("~/swissinfo/2015_Q2/2015_04_29_CHvotes_DD")
list.files("output", full.names = T)[list.files("output") != "bak"]
getwd()
lapply(files, function(x) list.files(pattern = x)) %>% unlist()
if (cleanOutput) {
files <- c(".*(initiative|Referendum)_.*html", "js")
if (!dir.exists("output/bak")) {
dir.create("output/bak")
} else {
list.files("output/bak/", full.names = T, recursive = T) %>% file.remove()
}
ori.files <- list.files("output", full.names = T)[list.files("output") != "bak"]
file.copy(ori.files, to = "output/bak/", recursive = T)
unlink(ori.files, recursive = T)
files_tomove <- lapply(files, function(x) list.files(pattern = x)) %>% unlist()
file.copy(files_tomove, "output", recursive = T)
unlink(files_tomove, recursive = T)
}
files <- c(".*(initiative|Referendum)_.*html", "js")
if (!dir.exists("output/bak")) {
dir.create("output/bak")
} else {
list.files("output/bak/", full.names = T, recursive = T) %>% file.remove()
}
ori.files <- list.files("output", full.names = T)[list.files("output") != "bak"]
file.copy(ori.files, to = "output/bak/", recursive = T)
unlink(ori.files, recursive = T)
files_tomove <- lapply(files, function(x) list.files(pattern = x)) %>% unlist()
files_tomove
file.copy(files_tomove, "output", recursive = T)
unlink(files_tomove, recursive = T)
